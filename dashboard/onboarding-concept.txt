body fat percentage optional, say if youd like to calculate it, there will be steps provided within your dashboard
profile -> user data -> body fat percentage

gym frequency required

past health conditions (ie: lower back issues etc)

preferred workout time optional (grok just recommended but not sure why its helpful)

feedback style (detailed, concise, maybe more)

validate inputs

----
onboarding page refactor
stop fucking with landingleft
make a new one thats similar, but doesnt have supabase auth
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { createClient } from "@/utils/supabase/client";
import Onboarding from "./components/Onboarding";
import Step1_AboutYou from "./components/Step1_AboutYou";
import Step2_Training from "./components/Step2_Training";
import Step3_Goals from "./components/Step3_Goals";
import Step4_Experience from "./components/Step4_Experience";
import { OnboardingFormData } from "./types/onboarding";

export default function OnboardingPage() {
  const supabase = createClient();
  const router = useRouter();

  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState<OnboardingFormData>({
    height: null,
    weight: null,
    bodyFatPercentage: null,
    gender: null,
    age: null,
    activityLevel: null,
    gymExperience: null,
    gymFrequency: null,
    healthConditions: [],
    workoutEnvironment: null,
    preferredWorkoutTime: null,
    weightGoal: null,
    calorieIntake: null,
    dietaryPreferences: [],
    favoriteFoods: [],
    feedbackStyle: null,
    calorieTrackingFrequency: null,
  });

  const updateForm = (fields: Partial<typeof formData>) =>
    setFormData((prev) => ({ ...prev, ...fields }));

  const nextStep = () => setStep((s) => Math.min(s + 1, 4));
  const prevStep = () => setStep((s) => Math.max(s - 1, 1));

  const handleFinalSubmit = async () => {
    const { data: user } = await supabase.auth.getUser();
    const userId = user?.user?.id;

    if (!userId) return alert("User not authenticated");

    const { error } = await supabase.from("profiles").update(formData).eq("id", userId);

    if (error) {
      console.error(error);
      return alert("Failed to save onboarding info.");
    }

    router.push("/dashboard");
  };

  return (
    <Onboarding step={step}>
      {step === 1 && <Step1_AboutYou data={formData} update={updateForm} onNext={nextStep} />}
      {step === 2 && <Step2_Training data={formData} update={updateForm} onNext={nextStep} onBack={prevStep} />}
      {step === 3 && <Step3_Goals data={formData} update={updateForm} onNext={nextStep} onBack={prevStep} />}
      {step === 4 && <Step4_Experience data={formData} update={updateForm} onBack={prevStep} onSubmit={handleFinalSubmit} />}
    </Onboarding>
    
  );
}